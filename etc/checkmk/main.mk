# -*- python -*-
# Main Checkmk configuration file
# Source controlled via Git: https://github.com/Lpg93/Ansible-ckm.git
#
# This file is the main entry point for non-WATO configurations.
# Hosts, rules, etc., managed by Ansible should primarily
# reside in individual files within the conf.d/ directory structure.

# Example: Define global settings if needed (rarely needed for basic setups)
# logwatch_forward_messages = False # Example global setting

# Define standard Checkmk list/dict variables if they don't exist.
# This prevents errors if other included .mk files assume they exist.
# These will be populated by files included from conf.d/ below.
if "all_hosts" not in globals(): all_hosts = []
if "ipaddresses" not in globals(): ipaddresses = {}
if "host_attributes" not in globals(): host_attributes = {}
if "host_tags" not in globals(): host_tags = {}
if "ruleset_rules" not in globals(): ruleset_rules = {}
if "bulkwalk_hosts" not in globals(): bulkwalk_hosts = []
if "clusters" not in globals(): clusters = {}
if "datasource_programs" not in globals(): datasource_programs = []
if "defined_custom_attributes" not in globals(): defined_custom_attributes = {}
if "host_contactgroups" not in globals(): host_contactgroups = []
if "host_groups" not in globals(): host_groups = []
if "parents" not in globals(): parents = []
if "service_contactgroups" not in globals(): service_contactgroups = []
if "service_groups" not in globals(): service_groups = []
# Add more as needed based on Checkmk documentation or features you use


# --- Include configuration files from conf.d/ ---
# This is the standard mechanism for loading configurations managed
# outside of WATO (like those generated by Ansible).
import os
import sys
import glob

basedir = os.path.dirname(__file__) # Directory where this main.mk resides

# Include all .mk files from conf.d/
config_files = glob.glob(basedir + "/conf.d/*.mk")
config_files.sort() # Ensure predictable load order (alphabetical)
if not config_files:
    print("WARNING: No *.mk files found in conf.d/. If you expected custom configurations, check the directory.")

for f in config_files:
    try:
        # You can uncomment the print statement below for debugging purposes
        # print("DEBUG: Including configuration file %s" % f)
        exec(open(f).read())
    except Exception as e:
        # Provide more context on error
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        sys.stderr.write("ERROR: Failed to load configuration file '%s': %s (in %s:%d)\n" % (f, e, fname, exc_tb.tb_lineno))
        # Depending on your policy, you might want to exit or raise here
        # raise # Uncomment to stop processing if a file fails

# Optional: Include files from local/ (If you use this structure for local overrides)
# local_config_files = glob.glob(basedir + "/local/*.mk")
# local_config_files.sort()
# for f in local_config_files:
#    try:
#        # print "DEBUG: Including local file %s" % f
#        exec(open(f).read())
#    except Exception as e:
#        exc_type, exc_obj, exc_tb = sys.exc_info()
#        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
#        sys.stderr.write("ERROR: Failed to load local configuration file '%s': %s (in %s:%d)\n" % (f, e, fname, exc_tb.tb_lineno))
#        # raise


# --- End of main configuration loading ---

# You can add other site-wide logic here if necessary, AFTER includes.
# Be careful not to overwrite variables populated by the included files.
